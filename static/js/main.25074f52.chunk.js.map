{"version":3,"sources":["components/Modal/Modal.module.scss","components/NameForm/NameForm.module.scss","components/App/App.module.scss","components/Button/Button.module.scss","components/InputForm/InputForm.module.scss","store/man.ts","store/err.ts","components/NameForm/NameForm.tsx","components/Button/Button.tsx","components/Modal/Modal.tsx","components/InputForm/InputForm.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","userName","surname","isSetted","makeAutoObservable","this","name","isSeted","nameError","surnameError","NameForm","observer","isName","placeholder","onClick","useState","man","setName","setMan","setUserName","setSurname","setErr","someErr","err","setNameError","setSurnameError","changeNameHandler","e","currentTarget","value","className","style","myInput","myErr","onBlur","autoFocus","onChange","onKeyPress","key","trim","Button","title","button1","Modal","props","active","styles","modal","modal_content","modalb_content","stopPropagation","toUpperCase","children","InputForm","SetActive","setIsSeted","container","setActive","App","header","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25074f52.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__1QiOb\",\"active\":\"Modal_active__hp7Wj\",\"modal_content\":\"Modal_modal_content__1wW5H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myInput\":\"NameForm_myInput__2eCkQ\",\"myErr\":\"NameForm_myErr__1_Df1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__1UX57\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button1\":\"Button_button1__ziRfJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"InputForm_container__9UZLC\"};","import {makeAutoObservable} from \"mobx\";\r\n\r\nclass Man {\r\n    userName: string =\"\"\r\n    surname: string = \"\"\r\n    isSetted: boolean=false\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    setUserName(name: string) {\r\n        this.userName = name\r\n    }\r\n\r\n    setSurname(surname: string) {\r\n        this.surname = surname\r\n    }\r\n    setIsSeted(isSeted: boolean) {\r\n        this.isSetted = isSeted\r\n    }\r\n}\r\n\r\nexport default new Man()","import {makeAutoObservable} from \"mobx\";\r\n\r\nclass Err {\r\n    nameError: string = \"\"\r\n    surnameError: string = \"\"\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    setNameError(nameError: string) {\r\n        this.nameError = nameError\r\n    }\r\n    clearNameError() {\r\n        this.nameError = \"\"\r\n    }\r\n    setSurnameError(surnameError: string) {\r\n        this.surnameError = surnameError\r\n    }\r\n    clearSurnameError() {\r\n        this.surnameError = \"\"\r\n    }\r\n\r\n}\r\n\r\nexport default new Err()","import React, {ChangeEvent, useState} from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport man from \"../../store/man\"\r\nimport err from \"../../store/err\"\r\nimport style from \"./NameForm.module.scss\"\r\n\r\n\r\ntype NameFormPropsType = {\r\n    isName: boolean\r\n    placeholder: string\r\n    onClick: () => void\r\n}\r\n\r\nexport const NameForm: React.FC<NameFormPropsType> = observer(({\r\n                                                                   isName,\r\n                                                                   placeholder,\r\n                                                                   onClick\r\n                                                               }) => {\r\n        const [name, setName] = useState<string>(isName ? man.userName : man.surname)\r\n\r\n        const setMan = (name: string) => {\r\n            isName\r\n                ? man.setUserName(name)\r\n                : man.setSurname(name)\r\n        }\r\n\r\n        const setErr = (someErr: string) => {\r\n            isName\r\n                ? err.setNameError(someErr)\r\n                : err.setSurnameError(someErr)\r\n        }\r\n\r\n        const changeName = () => {\r\n            if (name.trim()) {\r\n                setMan(name)\r\n                onClick()\r\n            } else {\r\n                setErr(isName ? \"пустое поле: Имя\" : \"пустое поле: Фамилия\")\r\n                setMan(\"\")\r\n            }\r\n        }\r\n\r\n        const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n            if (e.key === \"Enter\") changeName()\r\n        }\r\n\r\n        const changeNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setName(e.currentTarget.value)\r\n            setMan(e.currentTarget.value)\r\n            setErr(\"\")\r\n        }\r\n\r\n        return (\r\n            <div className={style.myInput}>\r\n              <div className={style.myErr}>\r\n                     {man.isSetted\r\n                  ? isName ? err.nameError : err.surnameError\r\n                  : \"\"}</div>\r\n                <input\r\n                    onBlur={changeNameHandler}\r\n                    autoFocus\r\n                    value={name}\r\n                    onChange={changeNameHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    placeholder={placeholder}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n)","import React from \"react\";\r\nimport style from \"./Button.module.scss\"\r\n\r\ntype ButtonPropsType = {\r\n    onClick: () => void;\r\n    title:string\r\n}\r\n\r\nconst Button = ({onClick,title}: ButtonPropsType) => {\r\n\r\n    return (\r\n        <button className={style.button1}\r\n                onClick={onClick}\r\n        >\r\n            {title}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\nimport styles from './Modal.module.scss'\r\nimport man from \"../../store/man\";\r\nimport Button from \"../Button/Button\";\r\n\r\n\r\nexport type ModalPropsType = {\r\n    setActive: (e: boolean) => void\r\n    active: boolean\r\n    onClick: () => void;\r\n    children?: any\r\n}\r\n\r\nexport const Modal = (props: ModalPropsType) => {\r\n\r\n    let active = `${styles.modal} ${styles.active}`\r\n    let modal_content = `${styles.modalb_content} ${styles.active}`\r\n    return (\r\n        <div className={props.active ? active : styles.modal}\r\n        >\r\n            <div className={props.active ? modal_content : styles.modal_content}\r\n                 onClick={e => e.stopPropagation()}>\r\n                <div>\r\n                    {\"Здравствуйте, \" + man.userName.toUpperCase() + \"  \" + man.surname.toUpperCase()}\r\n                    {props.children}\r\n                </div>\r\n            </div>\r\n            <Button\r\n                onClick={props.onClick}\r\n                title=\"Закрыть\"/>\r\n            </div>\r\n    )\r\n}","import {NameForm} from \"../NameForm/NameForm\";\r\nimport Button from \"../Button/Button\";\r\nimport man from \"../../store/man\"\r\nimport err from \"../../store/err\"\r\nimport {observer} from \"mobx-react-lite\"\r\nimport {Modal} from \"../Modal/Modal\";\r\nimport {useState} from \"react\";\r\nimport style from \"./InputForm.module.scss\";\r\n\r\n\r\nexport const InputForm = observer(() => {\r\n        const [active, SetActive] = useState<boolean>(false)\r\n        const onClick = () => {\r\n            if (man.userName && man.surname) {\r\n                SetActive(true)\r\n            }\r\n            if (!man.userName) {\r\n                err.setNameError(\"пустое поле: Имя\")\r\n            }\r\n            if (!man.surname) {\r\n                err.setSurnameError(\"пустое поле: Фамилия\")\r\n            }\r\n            man.setIsSeted(true)\r\n        }\r\n        const mySetActive = (e: boolean) => {\r\n            SetActive(e)\r\n        }\r\n        return (\r\n            <div className={style.container}>\r\n                <Modal\r\n                    onClick={() => SetActive(false)}\r\n                    active={active}\r\n                    setActive={mySetActive}/>\r\n                <NameForm\r\n                    isName={true}\r\n                    placeholder={\"Ваше имя\"}\r\n                    onClick={onClick}/>\r\n                <NameForm\r\n                    isName={false}\r\n                    placeholder={\"Ваша фамилия\"}\r\n                    onClick={onClick}/>\r\n                <Button\r\n                    onClick={onClick}\r\n                    title=\"Готово\"/>\r\n            </div>\r\n        )\r\n    }\r\n)","import React from 'react';\nimport style from './App.module.scss';\nimport {InputForm} from \"../InputForm/InputForm\";\n\n\nconst App = () => {\n    return (\n        <div>\n            <header className={style.header}>\n                <InputForm/>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}